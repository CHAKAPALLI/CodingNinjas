/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] arr) {
		quickSort(arr, 0, arr.length - 1);
	}

	public static void quickSort(int[] arr, int start, int end) {

		if (start >= end) {
			return;
		}
		int pivotPos = partition(arr, start, end);
		quickSort(arr, start, pivotPos - 1);
		quickSort(arr, pivotPos + 1, end);

	}

	public static int partition(int[] arr, int start, int end) {

		int pivot = arr[start];
		int count = 0;
		for (int i = start + 1; i <= end; i++) {
			if (arr[i] <= pivot) {
				count++;
			}
		}

		int pivotPos = start + count;
		int temp = arr[pivotPos];
		arr[pivotPos] = arr[start];
		arr[start] = temp;

		int i = start, j = end;
		while (i < pivotPos && j > pivotPos) {
			if (arr[i] <= pivot) {
				i++;
			} else if (arr[j] > pivot) {
				j--;
			} else {
				int temp2 = arr[i];
				arr[i] = arr[j];
				arr[j] = temp2;
				i++;
				j--;

			}
		}
		return pivotPos;

	}
}